{"version":3,"sources":["assets/zixuLogo.svg","assets/githubBtnIcon.svg","assets/tensorflowIcon.svg","assets/githubIcon.svg","assets/whoIcon.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","msiaData","updateData","modalState","setModalState","useEffect","request","XMLHttpRequest","open","send","csvData","jsonObject","responseText","split","i","length","push","msiadata","outputData","splice","objToPush","day","cases","parseInt","className","onClose","event","Title","Content","Action","passive","onClick","window","location","href","style","src","zixuLogo","alt","draggable","h4","h5","auto","githubBtnIcon","data","strokeDasharray","dataKey","type","stroke","fill","h6","whoIcon","githubIcon","tensorflowIcon","Boolean","hostname","match","ReactDOM","render","StrictMode","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3b8a4466.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/zixuLogo.e0852cb2.svg\";","module.exports = __webpack_public_path__ + \"static/media/githubBtnIcon.92c90f33.svg\";","module.exports = __webpack_public_path__ + \"static/media/tensorflowIcon.65eb0388.svg\";","module.exports = __webpack_public_path__ + \"static/media/githubIcon.f9bc636a.svg\";","module.exports = __webpack_public_path__ + \"static/media/whoIcon.64f74604.png\";","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { AreaChart, Area, CartesianGrid, XAxis, YAxis, ResponsiveContainer, Tooltip } from 'recharts';\nimport { Button, Modal, Text } from '@zeit-ui/react';\nimport zixuLogo from './assets/zixuLogo.svg';\nimport githubBtnIcon from './assets/githubBtnIcon.svg';\nimport tensorflowIcon from './assets/tensorflowIcon.svg';\nimport githubIcon from './assets/githubIcon.svg';\nimport whoIcon from './assets/whoIcon.png';\n\nfunction App() {\n    const [msiaData, updateData] = useState([]);\n    const [modalState, setModalState] = useState(false);\n    const handler = () => setModalState(true);\n    const closeHandler = (event) => {\n        setModalState(false)\n    };\n    useEffect(() => {\n        var request = new XMLHttpRequest();  \n        request.open(\"GET\", \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/who_covid_19_situation_reports/who_covid_19_sit_rep_time_series/who_covid_19_sit_rep_time_series.csv\", false);   \n        request.send(null);  \n\n        var csvData = [];\n        var jsonObject = request.responseText.split(/\\r?\\n|\\r/);\n        for (var i = 0; i < jsonObject.length; i++) {\n            csvData.push(jsonObject[i].split(','));\n        }\n        let msiadata = csvData[44];\n        let outputData = [];\n        msiadata.splice(0, 3);\n        for (let i = 0; i < msiadata.length; i++) {\n            if (msiadata[i]) {\n                let objToPush = {\n                    day: \"Day \" + (i + 1),\n                    cases: parseInt(msiadata[i])\n                }\n                outputData.push(objToPush);\n            } else {\n                let objToPush = {\n                    day: \"Day \" + (i + 1),\n                    cases: 0\n                }\n                outputData.push(objToPush);\n            }\n        }\n        updateData(outputData);\n    },[]);\n\n    return (\n        <div className=\"content\">\n            <Modal open={modalState} onClose={closeHandler}>\n                <Modal.Title>Warning</Modal.Title>\n                <Modal.Content>\n                    <p>You'll be redirected to GitHub.</p>\n                </Modal.Content>\n                <Modal.Action passive>Cancel</Modal.Action>\n                <Modal.Action onClick={() => {window.location.href = 'https://github.com/genesis331/ncov19';}}>OK</Modal.Action>\n            </Modal>\n            <section className=\"header\">\n                <div className=\"header-grid\">\n                    <div style={{'textAlign': 'left','height': '100%'}}>\n                        <div className=\"header-contents\">\n                            <img src={zixuLogo} alt=\"zixuLogo\" draggable={false} style={{'height': '2.8rem','verticalAlign': 'middle','marginRight': '2rem'}}/>\n                            <div style={{'display': 'inline-block','verticalAlign': 'middle'}}>\n                                <Text h4 style={{'fontFamily': 'Volte Bold', 'margin': '0'}}>AI Experiments</Text>\n                                <Text h5 style={{'margin': '0'}}>Malaysia nCoV-19 Cases Prediction</Text>\n                            </div>\n                        </div>\n                    </div>\n                    <div style={{'textAlign': 'right','height': '100%'}}>\n                        <div className=\"header-contents\">\n                            <Button auto onClick={handler}><img src={githubBtnIcon} alt=\"moon\" style={{'height': '1rem','verticalAlign': 'middle','paddingRight': '0.5rem'}}/><span style={{'verticalAlign': 'middle'}}> See Page Source Code</span></Button>\n                        </div>\n                    </div>\n                </div>\n            </section>\n            <section className=\"chart\">\n                <ResponsiveContainer>\n                    <AreaChart data={msiaData}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"day\" />\n                        <YAxis />\n                        <Tooltip type=\"monotone\" />\n                        <Area type=\"monotone\" dataKey=\"cases\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n                    </AreaChart>\n                </ResponsiveContainer>\n            </section>\n            <section className=\"footer\">\n                <div className=\"footer-grid\">\n                    <div style={{'textAlign': 'left','height': '100%'}}>\n                        <div className=\"footer-contents\">\n                            <Text h6>Disclaimer: Please understand that the data above may be outdated but is provided by the World Health Organization(WHO). It is used for personal research purposes only and is not recommended to use for reference purposes.</Text> \n                        </div>\n                    </div>\n                    <div style={{'textAlign': 'right','height': '100%'}}>\n                        <div className=\"footer-contents\">\n                            <img src={whoIcon} alt=\"whoIcon\" draggable={false} style={{'height': '3rem','marginRight': '1rem'}}/>\n                            <img src={githubIcon} alt=\"githubIcon\" draggable={false}/>\n                            <img src={tensorflowIcon} alt=\"tensorflowIcon\" draggable={false}/>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ZEITUIProvider, CSSBaseline } from '@zeit-ui/react';\n\nReactDOM.render(\n    <React.StrictMode>\n        <ZEITUIProvider theme={{type: 'dark'}}>\n            <CSSBaseline />\n            <App />\n        </ZEITUIProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}